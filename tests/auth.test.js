// tests/auth.test.js
const request = require('supertest');\nconst mongoose = require('mongoose');\nconst app = require('../server');\nconst User = require('../database/models/User');\n\ndescribe('Authentication Endpoints', () => {\n  beforeAll(async () => {\n    // Connect to test database\n    if (mongoose.connection.readyState === 0) {\n      await mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/ecochain_test');\n    }\n  });\n\n  afterAll(async () => {\n    // Clean up test data and close connection\n    await User.deleteMany({ 'personalInfo.email': /test.*@test.com/ });\n    await mongoose.connection.close();\n  });\n\n  describe('POST /api/auth/register', () => {\n    it('should register a new user successfully', async () => {\n      const userData = {\n        name: 'Test User',\n        email: 'testuser@test.com',\n        password: 'TestPass123',\n        phone: '1234567890',\n        role: 'user'\n      };\n\n      const response = await request(app)\n        .post('/api/auth/register')\n        .send(userData)\n        .expect(201);\n\n      expect(response.body.success).toBe(true);\n      expect(response.body.data.user.email).toBe(userData.email);\n      expect(response.body.data.tokens.accessToken).toBeDefined();\n      expect(response.body.data.tokens.refreshToken).toBeDefined();\n    });\n\n    it('should fail with invalid email', async () => {\n      const userData = {\n        name: 'Test User',\n        email: 'invalid-email',\n        password: 'TestPass123'\n      };\n\n      const response = await request(app)\n        .post('/api/auth/register')\n        .send(userData)\n        .expect(400);\n\n      expect(response.body.success).toBe(false);\n    });\n  });\n\n  describe('POST /api/auth/login', () => {\n    beforeEach(async () => {\n      // Create a test user\n      const testUser = new User({\n        userId: 'TEST001',\n        personalInfo: {\n          name: 'Login Test User',\n          email: 'logintest@test.com'\n        },\n        password: 'TestPass123',\n        role: 'user'\n      });\n      await testUser.save();\n    });\n\n    it('should login successfully with correct credentials', async () => {\n      const response = await request(app)\n        .post('/api/auth/login')\n        .send({\n          email: 'logintest@test.com',\n          password: 'TestPass123'\n        })\n        .expect(200);\n\n      expect(response.body.success).toBe(true);\n      expect(response.body.data.user.email).toBe('logintest@test.com');\n      expect(response.body.data.tokens.accessToken).toBeDefined();\n    });\n\n    it('should fail with incorrect password', async () => {\n      const response = await request(app)\n        .post('/api/auth/login')\n        .send({\n          email: 'logintest@test.com',\n          password: 'WrongPassword'\n        })\n        .expect(401);\n\n      expect(response.body.success).toBe(false);\n    });\n  });\n\n  describe('GET /api/auth/me', () => {\n    let authToken;\n\n    beforeEach(async () => {\n      // Create and login a test user\n      const testUser = new User({\n        userId: 'TEST002',\n        personalInfo: {\n          name: 'Profile Test User',\n          email: 'profiletest@test.com'\n        },\n        password: 'TestPass123',\n        role: 'user'\n      });\n      await testUser.save();\n\n      const loginResponse = await request(app)\n        .post('/api/auth/login')\n        .send({\n          email: 'profiletest@test.com',\n          password: 'TestPass123'\n        });\n\n      authToken = loginResponse.body.data.tokens.accessToken;\n    });\n\n    it('should get user profile with valid token', async () => {\n      const response = await request(app)\n        .get('/api/auth/me')\n        .set('Authorization', `Bearer ${authToken}`)\n        .expect(200);\n\n      expect(response.body.success).toBe(true);\n      expect(response.body.data.email).toBe('profiletest@test.com');\n    });\n\n    it('should fail without auth token', async () => {\n      const response = await request(app)\n        .get('/api/auth/me')\n        .expect(401);\n\n      expect(response.body.success).toBe(false);\n    });\n  });\n});\n\nmodule.exports = app;